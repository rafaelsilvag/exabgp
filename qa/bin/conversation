#!/usr/bin/env python

import os
import sys
import glob
import time
import signal
import subprocess


def get_env (name,default):
	return os.environ.get(name.upper(),os.environ.get(name.lower(),default))


def display (*args):
	sys.stdout.write(''.join(str(_) for _ in args))
	sys.stdout.flush()


class PATH:
	exabgp = ''
	daemon = ''
	conf = ''
	groups = []

	@classmethod
	def init (cls):
		location = os.path.abspath(os.path.join(os.path.realpath(__file__),'..','..','..'))

		conf = os.path.join(location,'qa','conf')
		if not os.path.isdir(conf):
			sys.exit('could not find conf folder')
		cls.conf = conf

		exabgp = os.path.join(location,'sbin','exabgp')
		if not os.path.isfile(exabgp):
			sys.exit("could not find exabgp")
		cls.exabgp = exabgp

		daemon = os.path.join(location,'qa','sbin','bgp')
		if not os.path.isfile(daemon):
			sys.exit('could not find the sequence daemon')
		cls.daemon = daemon

		cls.groups = glob.glob(os.path.join(PATH.conf,'*.group'))


class Color (object):
	RED   = '\033[0m' + '\033[91m'
	GREEN = '\033[1m' + '\033[92m'
	BLUE  = '\033[0m' + '\033[94m'
	END   = '\033[0m' + '\033[0m'


class STATUS (object):
	alphabet = [chr(_) for _ in range(ord('0'),ord('9')) + range(ord('A'),ord('Z')) + range(ord('a'),ord('z'))]

	names = list()
	letters = list()
	color = dict()
	short = dict()
	long = dict()
	sequence = dict()
	group = dict()
	conf = dict()
	port = dict()
	success = True
	base_port = 1790
	timeout = int(get_env('timeout',2*60))  # seconds

	@classmethod
	def register (cls,filename):
		name,extension = os.path.splitext(filename.split('/')[-1])
		with open(filename,'r') as reader:
			content = reader.readline()
			files = ' '.join([os.path.join(PATH.conf,_) for _ in content.split()])
			cls.conf[name] = files
		cls.group[name] = os.path.join(PATH.conf,name) + '.group'
		cls.sequence[name] = os.path.join(PATH.conf,name) + '.sequence'
		cls.names.append(name)
		cls.names = sorted(cls.names)
		cls.color[name] = Color.END
		cls.port[name] = cls.base_port
		cls._update()

	@classmethod
	def _update (cls):
		cls.long = dict(zip(cls.alphabet,cls.names))
		cls.short = dict((r,l) for (l,r) in cls.long.items())
		cls.letters = sorted(cls.short.keys())
		cls.base_port += 1

	@classmethod
	def start (cls,name):
		if name not in cls.names:
			name = cls.short[name]
		cls.color[name] = Color.BLUE

	@classmethod
	def passed (cls,name):
		if name not in cls.names:
			name = cls.short[name]
		cls.color[name] = Color.GREEN

	@classmethod
	def failed (cls,name):
		if name not in cls.names:
			name = cls.short[name]
		cls.color[name] = Color.RED
		cls.success = False

	@classmethod
	def display (cls):
		display('\r')
		for name in cls.names:
			color = cls.color[name]
			letter = cls.short.get(name,name)
			if color == Color.GREEN:
				letter = '-'
			display('%s%s ' % (color,letter))
		display(Color.END)

	@classmethod
	def listing (cls):
		display('\n')
		eol = 1
		for name in cls.names:
			display(cls.short[name],'  ', name, ' ' * (30 - len(name)))
			if not eol % 3:
				display('\n')
			eol += 1
		display('\n')


class Alarm (Exception):
	pass


def alarm_handler (number, frame):  # pylint: disable=W0613
	raise Alarm()


def run_client (display_only=False):
	config = get_env('client','')
	if not config:
		return ''

	name = STATUS.long[config]
	command = "env exabgp_debug_configuration=true exabgp_tcp_port=%d exabgp_tcp_once=true exabgp_debug_rotate=true exabgp_tcp_bind='' %s -d -p %s" % (STATUS.port[name],PATH.exabgp,STATUS.conf[name])
	if display_only:
		return '> ' + command

	print '>', command
	if os.system(command):
		sys.exit(1)
	sys.exit(0)


def run_server (display_only=False):
	config = get_env('server','')
	if not config:
		return ''

	name = STATUS.long[config]
	command = "env exabgp_tcp_port=%d %s %s" % (STATUS.port[name],PATH.daemon,STATUS.sequence[name])
	if display_only:
		return '> ' + command

	print '>', command
	if os.getuid() and os.getgid() and STATUS.base_port <= 1024:
		sys.exit('you need to have root privileges to bind to port 79')
	if os.system(command):
		sys.exit(1)
	sys.exit(0)


def run_listing ():
	if os.environ.get('LISTING',False) is False:
		return

	STATUS.listing()
	sys.exit(0)


def commands (exabgp, daemon, port):
	r = ""
	r += "command lines are:\n"
	r += 'export exabgp_debug_defensive=true\n'
	r += run_client(True)
	r += run_server(True)
	r += '\n'
	return r


def check (group, delay=1):
	directory = os.path.dirname(group)
	configurations = [os.path.join(directory,name) for name in open(group).read().strip().split()]
	sequence_file = group.replace('.group','.sequence')

	if not os.path.isfile(sequence_file):
		return False

	os.environ['exabgp_tcp_once'] = 'true'
	os.environ['exabgp_tcp_port'] = str(STATUS.base_port)
	# os.environ['exabgp_debug_defensive'] = 'true'
	os.environ['exabgp_debug_rotate'] = 'true'
	os.environ['exabgp_reactor_speed'] = '0.1'

	daemon_command = [PATH.daemon, sequence_file]
	exabgp_command = [PATH.exabgp, '-d'] + configurations

	name = group.split('/')[-1].split('.')[0]

	try:
		if get_env('dry',False) is not False:
			display(commands(exabgp_command,daemon_command,STATUS.base_port))
			sys.exit(1)

		daemon = subprocess.Popen(daemon_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		time.sleep(delay)
		exabgp = subprocess.Popen(exabgp_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

		exabgp_out,exabgp_err = exabgp.communicate()
		daemon_out,daemon_err = daemon.communicate()

		display(exabgp_out)
		display(exabgp_err)
		display(daemon_out)
		display(daemon_err)
	except Alarm:
		display(commands(exabgp_command,daemon_command,STATUS.base_port))

		display('failed, killed', name, '\n')

		try:
			daemon.terminate()
		except OSError:
			pass
		try:
			exabgp.terminate()
		except OSError:
			pass
		time.sleep(1)
		try:
			daemon.kill()
		except OSError:
			pass
		try:
			exabgp.kill()
		except OSError:
			pass
	except Exception,exc:
		display(commands(exabgp_command,daemon_command,STATUS.base_port))
		display(str(exc))


def dispatch (running):
	outs = {}
	errs = {}

	STATUS.listing()

	try:
		display('\n','checking','\n','--------','\n')

		processes = {}
		for name in running:
			processes[name] = subprocess.Popen([sys.argv[0],STATUS.group[name],str(STATUS.port[name])], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
			STATUS.start(name)
			STATUS.display()

		names = list(running)
		while names:
			STATUS.display()
			for name in list(names):
				process = processes[name]
				returncode = process.poll()
				if returncode is not None:
					names.remove(name)
					try:
						stdout,stderr = process.communicate()
						outs[name] = stdout
						errs[name] = stderr
						if 'failed' in stdout or 'expected' in stdout or 'only one attempt' not in stdout:
							STATUS.failed(name)
						else:
							STATUS.passed(name)
					except (IOError,OSError,ValueError):
						if name in names:
							names.remove(name)
			time.sleep(1)
		display('\n')
	except Alarm:
		display('\n\n')
		display('failed, a test is taking more than the allocated time','\n\n')

	if not STATUS.success:
		display('sending alarm signal to','\n','-----------------------','\n')

		for name in STATUS.names:
			process = processes.get(name,None)
			if process:
				try:
					process.send_signal(signal.SIGALRM)
					display(name,' ')
				except OSError:
					pass
		display('\n')

		if outs or errs:
			for name in outs.keys():
				display('\n','stdout for %s' % name,'\n','------','\n')
				display(outs[name])
				display('\n','stderr for %s' % name,'\n','------','\n')
				display(errs[name])

	return STATUS.success


if __name__ == '__main__':
	def extract_group ():
		if len(sys.argv) > 1:
			group = sys.argv[1]
			if not group.endswith('.group'):
				sys.exit('wrong name as parameter, it must be the group file ending in .group (%s)' % group)
			return group

	def extract_port ():
		if len(sys.argv) > 2:
			port = sys.argv[2]
			try:
				STATUS.base_port = int(port)
				print 'using port', port
			except (ValueError):
				sys.exit('invalid port value %s' % port)

	PATH.init()
	extract_port()

	# program group port
	if len(sys.argv) >= 2:
		success = check(extract_group())
		sys.exit(0 if success else 1)

	for group in PATH.groups:
		STATUS.register(group)

	# if CLIENT= is set, just run the client
	run_client()
	# if SERVER= is set, just run the server
	run_server()
	# if LISTING= is set, just show the listing
	run_listing()

	# usage without parameters
	signal.signal(signal.SIGALRM, alarm_handler)
	signal.alarm(STATUS.timeout)

	to_run = STATUS.names
	chunk = 10
	while to_run:
		running, to_run = to_run[:chunk], to_run[chunk:]
		success = dispatch(running)
	STATUS.display()

	sys.exit(0 if success else 1)
